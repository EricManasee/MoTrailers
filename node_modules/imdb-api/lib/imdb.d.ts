import { OmdbEpisode, OmdbMovie, OmdbSearch, OmdbSearchResult, OmdbTvshow } from "./interfaces";
export interface MovieOpts {
    apiKey?: string;
    timeout?: number;
}
export interface MovieRequest {
    name?: string;
    id?: string;
    year?: number;
    short_plot?: boolean;
}
export declare type RequestType = "movie" | "series" | "episode" | "game";
export interface SearchRequest {
    name: string;
    reqtype?: RequestType;
    year?: number;
}
export declare class Movie {
    imdbid: string;
    imdburl: string;
    genres: string;
    languages: string;
    country: string;
    votes: string;
    series: boolean;
    rating: number;
    runtime: string;
    title: string;
    year: number;
    type: string;
    poster: string;
    metascore: string;
    plot: string;
    rated: string;
    director: string;
    writer: string;
    actors: string;
    released?: Date;
    name: string;
    protected _year_data: string;
    constructor(obj: OmdbMovie);
}
export declare class Episode extends Movie {
    season: number;
    episode: number;
    constructor(obj: OmdbEpisode, season: number);
}
export declare class TVShow extends Movie {
    start_year: number;
    end_year?: number;
    totalseasons: number;
    private _episodes;
    private opts;
    constructor(obj: OmdbTvshow, opts: MovieOpts);
    episodes(): Promise<Episode[]>;
}
export declare class SearchResult {
    title: string;
    name: string;
    year: number;
    imdbid: string;
    type: RequestType;
    poster: string;
    constructor(obj: OmdbSearchResult);
}
export declare class SearchResults {
    results: SearchResult[];
    totalresults: number;
    private page;
    private opts;
    private req;
    constructor(obj: OmdbSearch, page: number, opts: MovieOpts, req: SearchRequest);
    next(): Promise<SearchResults>;
}
export declare class ImdbError {
    message: string;
    name: string;
    constructor(message: string);
}
export declare function get(req: MovieRequest, opts: MovieOpts): Promise<Movie>;
export declare function search(req: SearchRequest, opts: MovieOpts, page?: number): Promise<SearchResults>;
export declare class Client {
    private opts;
    constructor(opts: MovieOpts);
    get(req: MovieRequest, opts?: MovieOpts): Promise<Movie>;
    search(req: SearchRequest, page?: number, opts?: MovieOpts): Promise<SearchResults>;
    private merge_opts;
}
